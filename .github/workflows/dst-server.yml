name: DST Server Docker Build and Push

permissions:
  contents: read

on:
  schedule:
    - cron: '0 */2 * * *' # run every 2 hour
  workflow_dispatch: # allow to run manually

env:
  DOCKER_REGISTRY: docker.io

jobs:
  dst-build-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, x86]
    env:
      IMAGE_NAME: dstgo/dst-server-${{ matrix.arch }}
      DOCKERFILE_PATH: deploy/dontstarve/docker/${{ matrix.arch }}/Dockerfile
      TEMP_TAG: temp-${{ matrix.arch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.TEMP_TAG }}

      - name: Get DST server version from image
        id: get_version
        run: |
          VERSION=$(docker run --rm ${{ env.IMAGE_NAME }}:${{ env.TEMP_TAG }})
          if [[ -z "$VERSION" ]] || ! [[ "$VERSION" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid or empty version number: $VERSION"
            exit 1
          fi
          echo "DST_VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "DST_VERSION=${VERSION}"

      - name: Tag Docker image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.TEMP_TAG }} ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.IMAGE_NAME }}:${{ env.TEMP_TAG }} ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.DST_VERSION }}
          echo "Tagged images:"
          docker images | grep ${{ env.IMAGE_NAME }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.DST_VERSION }}
          echo "Pushed images:"
          echo "${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.DST_VERSION }}"