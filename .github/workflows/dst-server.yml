name: DST Server Docker Build and Push

permissions:
  contents: read

on:
  schedule:
    - cron: '0 1 * * *' # run every hour
  workflow_dispatch: # allow to run manually

env:
  DOCKER_REGISTRY: docker.io

jobs:
  check-updates:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Check Game Updates
        id: check
        run: |
          # Check if image exists
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://registry.hub.docker.com/v2/repositories/dstgo/dst-server-x64/tags/)

          if [[ "$HTTP_STATUS" == "404" ]]; then
            echo "Image does not exist, proceeding with build"
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Fetch latest image version
          CUR_VERSION=$(curl -s https://registry.hub.docker.com/v2/repositories/dstgo/dst-server-x64/tags/ | \
            jq -r '.results[].name' | \
            grep -v '^latest$' | \
            grep -E '^[0-9]+$' | \
            sort -rn | \
            head -n 1)

          if [[ -z "$CUR_VERSION" ]] || ! [[ "$CUR_VERSION" =~ ^[0-9]+$ ]]; then
            echo "Error: failed to fetch latest image version: $CUR_VERSION"
            exit 1
          fi

          # Fetch latest dst version
          LATEST_VERSION=$(go run ./framework/dontstarve/release/cmd/dstv latest)
          if [[ -z "$LATEST_VERSION" ]] || ! [[ "$LATEST_VERSION" =~ ^[0-9]+$ ]]; then
            echo "Error: failed to fetch latest dst version: $LATEST_VERSION"
            exit 1
          fi

          echo "Current version: $CUR_VERSION"
          echo "Latest version: $LATEST_VERSION"

          # Check if a new version is available
          if (( CUR_VERSION < LATEST_VERSION )); then
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  dst-build-push:
    needs: check-updates
    if: needs.check-updates.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ x64, x86 ]
    env:
      IMAGE_NAME: dstgo/dst-server-${{ matrix.arch }}
      DOCKERFILE_PATH: deploy/dontstarve/docker/${{ matrix.arch }}/Dockerfile
      TEMP_TAG: temp-${{ matrix.arch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.TEMP_TAG }}

      - name: Get DST server version from image
        id: get_version
        run: |
          VERSION=$(docker run --rm ${{ env.IMAGE_NAME }}:${{ env.TEMP_TAG }})
          if [[ -z "$VERSION" ]] || ! [[ "$VERSION" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid or empty version number: $VERSION"
            exit 1
          fi
          echo "DST_VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "DST_VERSION=${VERSION}"

      - name: Tag Docker image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.TEMP_TAG }} ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.IMAGE_NAME }}:${{ env.TEMP_TAG }} ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.DST_VERSION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.DST_VERSION }}

      - name: Clean up Docker images
        if: always()
        run: |
          docker rmi ${{ env.IMAGE_NAME }}:${{ env.TEMP_TAG }}
          docker rmi ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker rmi ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.DST_VERSION }}