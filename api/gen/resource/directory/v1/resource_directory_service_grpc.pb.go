// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: resource/directory/v1/resource_directory_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Directory_GetDirectory_FullMethodName    = "/wilson.api.resource.directory.v1.Directory/GetDirectory"
	Directory_ListDirectory_FullMethodName   = "/wilson.api.resource.directory.v1.Directory/ListDirectory"
	Directory_CreateDirectory_FullMethodName = "/wilson.api.resource.directory.v1.Directory/CreateDirectory"
	Directory_UpdateDirectory_FullMethodName = "/wilson.api.resource.directory.v1.Directory/UpdateDirectory"
	Directory_DeleteDirectory_FullMethodName = "/wilson.api.resource.directory.v1.Directory/DeleteDirectory"
)

// DirectoryClient is the client API for Directory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryClient interface {
	// GetDirectory
	GetDirectory(ctx context.Context, in *GetDirectoryRequest, opts ...grpc.CallOption) (*GetDirectoryReply, error)
	// ListDirectory
	ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryReply, error)
	// CreateDirectory
	CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*CreateDirectoryReply, error)
	// UpdateDirectory
	UpdateDirectory(ctx context.Context, in *UpdateDirectoryRequest, opts ...grpc.CallOption) (*UpdateDirectoryReply, error)
	// DeleteDirectory
	DeleteDirectory(ctx context.Context, in *DeleteDirectoryRequest, opts ...grpc.CallOption) (*DeleteDirectoryReply, error)
}

type directoryClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryClient(cc grpc.ClientConnInterface) DirectoryClient {
	return &directoryClient{cc}
}

func (c *directoryClient) GetDirectory(ctx context.Context, in *GetDirectoryRequest, opts ...grpc.CallOption) (*GetDirectoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDirectoryReply)
	err := c.cc.Invoke(ctx, Directory_GetDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) ListDirectory(ctx context.Context, in *ListDirectoryRequest, opts ...grpc.CallOption) (*ListDirectoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDirectoryReply)
	err := c.cc.Invoke(ctx, Directory_ListDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*CreateDirectoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDirectoryReply)
	err := c.cc.Invoke(ctx, Directory_CreateDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) UpdateDirectory(ctx context.Context, in *UpdateDirectoryRequest, opts ...grpc.CallOption) (*UpdateDirectoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDirectoryReply)
	err := c.cc.Invoke(ctx, Directory_UpdateDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryClient) DeleteDirectory(ctx context.Context, in *DeleteDirectoryRequest, opts ...grpc.CallOption) (*DeleteDirectoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDirectoryReply)
	err := c.cc.Invoke(ctx, Directory_DeleteDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryServer is the server API for Directory service.
// All implementations must embed UnimplementedDirectoryServer
// for forward compatibility.
type DirectoryServer interface {
	// GetDirectory
	GetDirectory(context.Context, *GetDirectoryRequest) (*GetDirectoryReply, error)
	// ListDirectory
	ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryReply, error)
	// CreateDirectory
	CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryReply, error)
	// UpdateDirectory
	UpdateDirectory(context.Context, *UpdateDirectoryRequest) (*UpdateDirectoryReply, error)
	// DeleteDirectory
	DeleteDirectory(context.Context, *DeleteDirectoryRequest) (*DeleteDirectoryReply, error)
	mustEmbedUnimplementedDirectoryServer()
}

// UnimplementedDirectoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDirectoryServer struct{}

func (UnimplementedDirectoryServer) GetDirectory(context.Context, *GetDirectoryRequest) (*GetDirectoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectory not implemented")
}
func (UnimplementedDirectoryServer) ListDirectory(context.Context, *ListDirectoryRequest) (*ListDirectoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDirectory not implemented")
}
func (UnimplementedDirectoryServer) CreateDirectory(context.Context, *CreateDirectoryRequest) (*CreateDirectoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectory not implemented")
}
func (UnimplementedDirectoryServer) UpdateDirectory(context.Context, *UpdateDirectoryRequest) (*UpdateDirectoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDirectory not implemented")
}
func (UnimplementedDirectoryServer) DeleteDirectory(context.Context, *DeleteDirectoryRequest) (*DeleteDirectoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDirectory not implemented")
}
func (UnimplementedDirectoryServer) mustEmbedUnimplementedDirectoryServer() {}
func (UnimplementedDirectoryServer) testEmbeddedByValue()                   {}

// UnsafeDirectoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryServer will
// result in compilation errors.
type UnsafeDirectoryServer interface {
	mustEmbedUnimplementedDirectoryServer()
}

func RegisterDirectoryServer(s grpc.ServiceRegistrar, srv DirectoryServer) {
	// If the following call pancis, it indicates UnimplementedDirectoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Directory_ServiceDesc, srv)
}

func _Directory_GetDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).GetDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_GetDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).GetDirectory(ctx, req.(*GetDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_ListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).ListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_ListDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).ListDirectory(ctx, req.(*ListDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_CreateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).CreateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_CreateDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).CreateDirectory(ctx, req.(*CreateDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_UpdateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).UpdateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_UpdateDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).UpdateDirectory(ctx, req.(*UpdateDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Directory_DeleteDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServer).DeleteDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Directory_DeleteDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServer).DeleteDirectory(ctx, req.(*DeleteDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Directory_ServiceDesc is the grpc.ServiceDesc for Directory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Directory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wilson.api.resource.directory.v1.Directory",
	HandlerType: (*DirectoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDirectory",
			Handler:    _Directory_GetDirectory_Handler,
		},
		{
			MethodName: "ListDirectory",
			Handler:    _Directory_ListDirectory_Handler,
		},
		{
			MethodName: "CreateDirectory",
			Handler:    _Directory_CreateDirectory_Handler,
		},
		{
			MethodName: "UpdateDirectory",
			Handler:    _Directory_UpdateDirectory_Handler,
		},
		{
			MethodName: "DeleteDirectory",
			Handler:    _Directory_DeleteDirectory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource/directory/v1/resource_directory_service.proto",
}
