// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: manager/dictionary/v1/manager_dictionary_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Dictionary_ListDictionary_FullMethodName              = "/wilson.api.manager.dictionary.v1.Dictionary/ListDictionary"
	Dictionary_CreateDictionary_FullMethodName            = "/wilson.api.manager.dictionary.v1.Dictionary/CreateDictionary"
	Dictionary_UpdateDictionary_FullMethodName            = "/wilson.api.manager.dictionary.v1.Dictionary/UpdateDictionary"
	Dictionary_DeleteDictionary_FullMethodName            = "/wilson.api.manager.dictionary.v1.Dictionary/DeleteDictionary"
	Dictionary_GetDictionaryValues_FullMethodName         = "/wilson.api.manager.dictionary.v1.Dictionary/GetDictionaryValues"
	Dictionary_ListDictionaryValue_FullMethodName         = "/wilson.api.manager.dictionary.v1.Dictionary/ListDictionaryValue"
	Dictionary_CreateDictionaryValue_FullMethodName       = "/wilson.api.manager.dictionary.v1.Dictionary/CreateDictionaryValue"
	Dictionary_UpdateDictionaryValue_FullMethodName       = "/wilson.api.manager.dictionary.v1.Dictionary/UpdateDictionaryValue"
	Dictionary_UpdateDictionaryValueStatus_FullMethodName = "/wilson.api.manager.dictionary.v1.Dictionary/UpdateDictionaryValueStatus"
	Dictionary_DeleteDictionaryValue_FullMethodName       = "/wilson.api.manager.dictionary.v1.Dictionary/DeleteDictionaryValue"
	Dictionary_GetDictionary_FullMethodName               = "/wilson.api.manager.dictionary.v1.Dictionary/GetDictionary"
)

// DictionaryClient is the client API for Dictionary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictionaryClient interface {
	// ListDictionary
	ListDictionary(ctx context.Context, in *ListDictionaryRequest, opts ...grpc.CallOption) (*ListDictionaryReply, error)
	// CreateDictionary
	CreateDictionary(ctx context.Context, in *CreateDictionaryRequest, opts ...grpc.CallOption) (*CreateDictionaryReply, error)
	// UpdateDictionary
	UpdateDictionary(ctx context.Context, in *UpdateDictionaryRequest, opts ...grpc.CallOption) (*UpdateDictionaryReply, error)
	// DeleteDictionary
	DeleteDictionary(ctx context.Context, in *DeleteDictionaryRequest, opts ...grpc.CallOption) (*DeleteDictionaryReply, error)
	// GetDictionaryValues
	GetDictionaryValues(ctx context.Context, in *GetDictionaryValuesRequest, opts ...grpc.CallOption) (*GetDictionaryValuesReply, error)
	// ListDictionaryValue
	ListDictionaryValue(ctx context.Context, in *ListDictionaryValueRequest, opts ...grpc.CallOption) (*ListDictionaryValueReply, error)
	// CreateDictionaryValue
	CreateDictionaryValue(ctx context.Context, in *CreateDictionaryValueRequest, opts ...grpc.CallOption) (*CreateDictionaryValueReply, error)
	// UpdateDictionaryValue
	UpdateDictionaryValue(ctx context.Context, in *UpdateDictionaryValueRequest, opts ...grpc.CallOption) (*UpdateDictionaryValueReply, error)
	// UpdateDictionaryValueStatus
	UpdateDictionaryValueStatus(ctx context.Context, in *UpdateDictionaryValueStatusRequest, opts ...grpc.CallOption) (*UpdateDictionaryValueStatusReply, error)
	// DeleteDictionaryValue
	DeleteDictionaryValue(ctx context.Context, in *DeleteDictionaryValueRequest, opts ...grpc.CallOption) (*DeleteDictionaryValueReply, error)
	// GetDictionary
	GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...grpc.CallOption) (*GetDictionaryReply, error)
}

type dictionaryClient struct {
	cc grpc.ClientConnInterface
}

func NewDictionaryClient(cc grpc.ClientConnInterface) DictionaryClient {
	return &dictionaryClient{cc}
}

func (c *dictionaryClient) ListDictionary(ctx context.Context, in *ListDictionaryRequest, opts ...grpc.CallOption) (*ListDictionaryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDictionaryReply)
	err := c.cc.Invoke(ctx, Dictionary_ListDictionary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) CreateDictionary(ctx context.Context, in *CreateDictionaryRequest, opts ...grpc.CallOption) (*CreateDictionaryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDictionaryReply)
	err := c.cc.Invoke(ctx, Dictionary_CreateDictionary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) UpdateDictionary(ctx context.Context, in *UpdateDictionaryRequest, opts ...grpc.CallOption) (*UpdateDictionaryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDictionaryReply)
	err := c.cc.Invoke(ctx, Dictionary_UpdateDictionary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) DeleteDictionary(ctx context.Context, in *DeleteDictionaryRequest, opts ...grpc.CallOption) (*DeleteDictionaryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDictionaryReply)
	err := c.cc.Invoke(ctx, Dictionary_DeleteDictionary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) GetDictionaryValues(ctx context.Context, in *GetDictionaryValuesRequest, opts ...grpc.CallOption) (*GetDictionaryValuesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDictionaryValuesReply)
	err := c.cc.Invoke(ctx, Dictionary_GetDictionaryValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) ListDictionaryValue(ctx context.Context, in *ListDictionaryValueRequest, opts ...grpc.CallOption) (*ListDictionaryValueReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDictionaryValueReply)
	err := c.cc.Invoke(ctx, Dictionary_ListDictionaryValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) CreateDictionaryValue(ctx context.Context, in *CreateDictionaryValueRequest, opts ...grpc.CallOption) (*CreateDictionaryValueReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDictionaryValueReply)
	err := c.cc.Invoke(ctx, Dictionary_CreateDictionaryValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) UpdateDictionaryValue(ctx context.Context, in *UpdateDictionaryValueRequest, opts ...grpc.CallOption) (*UpdateDictionaryValueReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDictionaryValueReply)
	err := c.cc.Invoke(ctx, Dictionary_UpdateDictionaryValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) UpdateDictionaryValueStatus(ctx context.Context, in *UpdateDictionaryValueStatusRequest, opts ...grpc.CallOption) (*UpdateDictionaryValueStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDictionaryValueStatusReply)
	err := c.cc.Invoke(ctx, Dictionary_UpdateDictionaryValueStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) DeleteDictionaryValue(ctx context.Context, in *DeleteDictionaryValueRequest, opts ...grpc.CallOption) (*DeleteDictionaryValueReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDictionaryValueReply)
	err := c.cc.Invoke(ctx, Dictionary_DeleteDictionaryValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryClient) GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...grpc.CallOption) (*GetDictionaryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDictionaryReply)
	err := c.cc.Invoke(ctx, Dictionary_GetDictionary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictionaryServer is the server API for Dictionary service.
// All implementations must embed UnimplementedDictionaryServer
// for forward compatibility.
type DictionaryServer interface {
	// ListDictionary
	ListDictionary(context.Context, *ListDictionaryRequest) (*ListDictionaryReply, error)
	// CreateDictionary
	CreateDictionary(context.Context, *CreateDictionaryRequest) (*CreateDictionaryReply, error)
	// UpdateDictionary
	UpdateDictionary(context.Context, *UpdateDictionaryRequest) (*UpdateDictionaryReply, error)
	// DeleteDictionary
	DeleteDictionary(context.Context, *DeleteDictionaryRequest) (*DeleteDictionaryReply, error)
	// GetDictionaryValues
	GetDictionaryValues(context.Context, *GetDictionaryValuesRequest) (*GetDictionaryValuesReply, error)
	// ListDictionaryValue
	ListDictionaryValue(context.Context, *ListDictionaryValueRequest) (*ListDictionaryValueReply, error)
	// CreateDictionaryValue
	CreateDictionaryValue(context.Context, *CreateDictionaryValueRequest) (*CreateDictionaryValueReply, error)
	// UpdateDictionaryValue
	UpdateDictionaryValue(context.Context, *UpdateDictionaryValueRequest) (*UpdateDictionaryValueReply, error)
	// UpdateDictionaryValueStatus
	UpdateDictionaryValueStatus(context.Context, *UpdateDictionaryValueStatusRequest) (*UpdateDictionaryValueStatusReply, error)
	// DeleteDictionaryValue
	DeleteDictionaryValue(context.Context, *DeleteDictionaryValueRequest) (*DeleteDictionaryValueReply, error)
	// GetDictionary
	GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryReply, error)
	mustEmbedUnimplementedDictionaryServer()
}

// UnimplementedDictionaryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDictionaryServer struct{}

func (UnimplementedDictionaryServer) ListDictionary(context.Context, *ListDictionaryRequest) (*ListDictionaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDictionary not implemented")
}
func (UnimplementedDictionaryServer) CreateDictionary(context.Context, *CreateDictionaryRequest) (*CreateDictionaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictionary not implemented")
}
func (UnimplementedDictionaryServer) UpdateDictionary(context.Context, *UpdateDictionaryRequest) (*UpdateDictionaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictionary not implemented")
}
func (UnimplementedDictionaryServer) DeleteDictionary(context.Context, *DeleteDictionaryRequest) (*DeleteDictionaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictionary not implemented")
}
func (UnimplementedDictionaryServer) GetDictionaryValues(context.Context, *GetDictionaryValuesRequest) (*GetDictionaryValuesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaryValues not implemented")
}
func (UnimplementedDictionaryServer) ListDictionaryValue(context.Context, *ListDictionaryValueRequest) (*ListDictionaryValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDictionaryValue not implemented")
}
func (UnimplementedDictionaryServer) CreateDictionaryValue(context.Context, *CreateDictionaryValueRequest) (*CreateDictionaryValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictionaryValue not implemented")
}
func (UnimplementedDictionaryServer) UpdateDictionaryValue(context.Context, *UpdateDictionaryValueRequest) (*UpdateDictionaryValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictionaryValue not implemented")
}
func (UnimplementedDictionaryServer) UpdateDictionaryValueStatus(context.Context, *UpdateDictionaryValueStatusRequest) (*UpdateDictionaryValueStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictionaryValueStatus not implemented")
}
func (UnimplementedDictionaryServer) DeleteDictionaryValue(context.Context, *DeleteDictionaryValueRequest) (*DeleteDictionaryValueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictionaryValue not implemented")
}
func (UnimplementedDictionaryServer) GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionary not implemented")
}
func (UnimplementedDictionaryServer) mustEmbedUnimplementedDictionaryServer() {}
func (UnimplementedDictionaryServer) testEmbeddedByValue()                    {}

// UnsafeDictionaryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictionaryServer will
// result in compilation errors.
type UnsafeDictionaryServer interface {
	mustEmbedUnimplementedDictionaryServer()
}

func RegisterDictionaryServer(s grpc.ServiceRegistrar, srv DictionaryServer) {
	// If the following call pancis, it indicates UnimplementedDictionaryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dictionary_ServiceDesc, srv)
}

func _Dictionary_ListDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).ListDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_ListDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).ListDictionary(ctx, req.(*ListDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_CreateDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).CreateDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_CreateDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).CreateDictionary(ctx, req.(*CreateDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_UpdateDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).UpdateDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_UpdateDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).UpdateDictionary(ctx, req.(*UpdateDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_DeleteDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).DeleteDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_DeleteDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).DeleteDictionary(ctx, req.(*DeleteDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_GetDictionaryValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).GetDictionaryValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_GetDictionaryValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).GetDictionaryValues(ctx, req.(*GetDictionaryValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_ListDictionaryValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictionaryValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).ListDictionaryValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_ListDictionaryValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).ListDictionaryValue(ctx, req.(*ListDictionaryValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_CreateDictionaryValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictionaryValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).CreateDictionaryValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_CreateDictionaryValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).CreateDictionaryValue(ctx, req.(*CreateDictionaryValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_UpdateDictionaryValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictionaryValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).UpdateDictionaryValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_UpdateDictionaryValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).UpdateDictionaryValue(ctx, req.(*UpdateDictionaryValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_UpdateDictionaryValueStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictionaryValueStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).UpdateDictionaryValueStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_UpdateDictionaryValueStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).UpdateDictionaryValueStatus(ctx, req.(*UpdateDictionaryValueStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_DeleteDictionaryValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictionaryValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).DeleteDictionaryValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_DeleteDictionaryValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).DeleteDictionaryValue(ctx, req.(*DeleteDictionaryValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dictionary_GetDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServer).GetDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dictionary_GetDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServer).GetDictionary(ctx, req.(*GetDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dictionary_ServiceDesc is the grpc.ServiceDesc for Dictionary service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dictionary_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wilson.api.manager.dictionary.v1.Dictionary",
	HandlerType: (*DictionaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDictionary",
			Handler:    _Dictionary_ListDictionary_Handler,
		},
		{
			MethodName: "CreateDictionary",
			Handler:    _Dictionary_CreateDictionary_Handler,
		},
		{
			MethodName: "UpdateDictionary",
			Handler:    _Dictionary_UpdateDictionary_Handler,
		},
		{
			MethodName: "DeleteDictionary",
			Handler:    _Dictionary_DeleteDictionary_Handler,
		},
		{
			MethodName: "GetDictionaryValues",
			Handler:    _Dictionary_GetDictionaryValues_Handler,
		},
		{
			MethodName: "ListDictionaryValue",
			Handler:    _Dictionary_ListDictionaryValue_Handler,
		},
		{
			MethodName: "CreateDictionaryValue",
			Handler:    _Dictionary_CreateDictionaryValue_Handler,
		},
		{
			MethodName: "UpdateDictionaryValue",
			Handler:    _Dictionary_UpdateDictionaryValue_Handler,
		},
		{
			MethodName: "UpdateDictionaryValueStatus",
			Handler:    _Dictionary_UpdateDictionaryValueStatus_Handler,
		},
		{
			MethodName: "DeleteDictionaryValue",
			Handler:    _Dictionary_DeleteDictionaryValue_Handler,
		},
		{
			MethodName: "GetDictionary",
			Handler:    _Dictionary_GetDictionary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager/dictionary/v1/manager_dictionary_service.proto",
}
